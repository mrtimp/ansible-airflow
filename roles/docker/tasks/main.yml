---
- name: Ensure system packages are up to date
  ansible.builtin.yum:
    name: '*'
    state: latest

- name: Install required packages
  ansible.builtin.yum:
    name:
      - yum-utils
      - device-mapper-persistent-data
      - lvm2
    state: present

- name: Add Docker repository
  ansible.builtin.get_url:
    url: https://download.docker.com/linux/centos/docker-ce.repo
    dest: /etc/yum.repos.d/docker-ce.repo

#- name: Ensure Docker repo is enabled for AlmaLinux 9
#  ansible.builtin.replace:
#    path: /etc/yum.repos.d/docker-ce.repo
#    regexp: 'enabled=0'
#    replace: 'enabled=1'

# Disable all unnecessary repos for ARM64
- name: Disable Docker CE stable debuginfo repo
  ansible.builtin.command: yum-config-manager --disable docker-ce-stable-debuginfo
  changed_when: true
  when: ansible_architecture == "aarch64"

- name: Disable Docker CE stable source repo
  ansible.builtin.command: yum-config-manager --disable docker-ce-stable-source
  changed_when: true
  when: ansible_architecture == "aarch64"

- name: Disable Docker CE test repo
  ansible.builtin.command: yum-config-manager --disable docker-ce-test
  changed_when: true
  when: ansible_architecture == "aarch64"

- name: Disable Docker CE test debuginfo repo
  ansible.builtin.command: yum-config-manager --disable docker-ce-test-debuginfo
  changed_when: true
  when: ansible_architecture == "aarch64"

- name: Disable Docker CE test source repo
  ansible.builtin.command: yum-config-manager --disable docker-ce-test-source
  changed_when: true
  when: ansible_architecture == "aarch64"

- name: Disable Docker CE nightly repo
  ansible.builtin.command: yum-config-manager --disable docker-ce-nightly
  changed_when: true
  when: ansible_architecture == "aarch64"

- name: Disable Docker CE nightly repo
  ansible.builtin.command: yum-config-manager --disable docker-ce-nightly-debuginfo
  changed_when: true
  when: ansible_architecture == "aarch64"

- name: Disable Docker CE nightly source repo
  ansible.builtin.command: yum-config-manager --disable docker-ce-nightly-source
  changed_when: true
  when: ansible_architecture == "aarch64"

- name: Install Docker
  ansible.builtin.yum:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: latest

- name: Enable and start Docker service
  ansible.builtin.service:
    name: docker
    state: started
    enabled: true

- name: Add current user to docker group
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes

- name: Restart Docker if needed
  ansible.builtin.meta: flush_handlers

# --- AIRFLOW CONFIGURATION ---

- name: Ensure airflow group exists with GID 50000
  ansible.builtin.group:
    name: airflow
    gid: 50000
    state: present

- name: Ensure airflow user exists with UID 50000
  ansible.builtin.user:
    name: airflow
    uid: 50000
    group: airflow
    state: present
    create_home: no
    system: yes

- name: Ensure local Airflow directory exists
  ansible.builtin.file:
    path: /opt/airflow
    state: directory
    owner: airflow
    group: airflow
    mode: '0755'

# --- DOCKER COMPOSE CONFIGURATION ---

- name: Custom Airflow Dockerfile
  ansible.builtin.copy:
    dest: /opt/airflow/Dockerfile
    content: |
      FROM apache/airflow:2.11.0
      
      USER root
      
      RUN ln -s /opt/airflow /home/airflow/airflow
      RUN groupadd -g 996 docker \
        && usermod -aG docker airflow
      
      USER airflow

# Copy docker-compose.yml to /opt
- name: Copy docker-compose.yml to /opt
  ansible.builtin.copy:
    dest: /opt/docker-compose.yml
    mode: '0640'
    content: |
      x-airflow-common:
        &airflow-common
        build: ./airflow
        container_name: airflow-scheduler
        restart: always
        depends_on:
          - postgres
        environment:      
          AIRFLOW__CELERY__BROKER_URL: "redis://redis:6379/0"
          AIRFLOW__CELERY__RESULT_BACKEND: "db+postgresql://airflow:airflow@postgres/airflow"
          AIRFLOW__CORE__LOAD_EXAMPLES: "False"
          AIRFLOW__CORE__EXECUTOR: "CeleryExecutor"
          AIRFLOW__CORE__DEFAULT_TIMEZONE: "Pacific/Auckland"
          AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: "postgresql+psycopg2://airflow:airflow@postgres/airflow"      
          AIRFLOW__EMAIL_EMAIL_BACKEND: "airflow.utils.email.send_email_smtp"
          AIRFLOW__EMAIL__DEFAULT_EMAIL_ON_FAILURE: "True"
          AIRFLOW__EMAIL__DEFAULT_EMAIL_ON_RETRY: "True"
          AIRFLOW__SCHEDULER__CATCHUP_BY_DEFAULT: "False"
          AIRFLOW__WEBSERVER__DEFAULT_UI_TIMEZONE: "Pacific/Auckland"
          AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "True"
          TZ: "Pacific/Auckland"
        volumes:
          - /opt/airflow:/opt/airflow
          - /var/run/docker.sock:/var/run/docker.sock

      services:
        postgres:
          image: postgres:16.9
          container_name: postgres
          restart: always
          ports:
            - "5432:5432"
          environment:
            POSTGRES_USER: airflow
            POSTGRES_PASSWORD: airflow
            POSTGRES_DB: airflow    
            TZ: "Pacific/Auckland"
          healthcheck:
            test: ["CMD", "pg_isready", "-U", "airflow"]
            interval: 10s
            retries: 5
            start_period: 5s
          volumes:
            - postgres_data:/var/lib/postgresql/data
            - /opt/postgres-backups:/opt/postgres-backups
      
        redis:
          # Redis is limited to 7.2-bookworm due to licencing change
          # https://redis.io/blog/redis-adopts-dual-source-available-licensing/
          image: redis:7.2-bookworm
          container_name: redis
          expose:
            - 6379
          healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 30s
            retries: 50
            start_period: 30s
          restart: always

        airflow-scheduler:
          <<: *airflow-common
          container_name: airflow-scheduler
          command: scheduler
          healthcheck:
            test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob --hostname $(hostname)"]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 30s

        airflow-webserver:
          <<: *airflow-common
          container_name: airflow-webserver
          ports:
            - "8080:8080"
          command: webserver
          healthcheck:
            test: ["CMD", "curl", "--fail", "http://localhost:8080/airflow/health"]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 30s

      volumes:
        postgres_data:

- name: Copy Airflow DAG auto_remove upgrade script
  ansible.builtin.copy:
    dest: /opt/upgrade-dags.py
    mode: '0755'
    content: |
      #!/usr/bin/env python3

      import os
      import re

      DAGS_DIR = "/opt/airflow/dags"

      def fix_file(filepath):
          with open(filepath, "r") as f:
              content = f.read()

          new_content, count = re.subn(
              r"(auto_remove\\s*=\\s*)True",
              r"\\1'success'",
              content
          )

          if count > 0:
              backup = filepath + ".bak"
              os.rename(filepath, backup)
              with open(filepath, "w") as f:
                  f.write(new_content)
              print(f"Updated: {filepath} (backup: {backup})")

      def main():
          for root, dirs, files in os.walk(DAGS_DIR):
              for file in files:
                  if file.endswith(".py"):
                      fix_file(os.path.join(root, file))

      if __name__ == "__main__":
          main()

- name: Launch Airflow + Postgres containers
  ansible.builtin.command:
    cmd: docker compose up -d
    chdir: /opt
  changed_when: true

- name: Install python3-firewall for firewalld module support
  ansible.builtin.yum:
    name:
      - python3-firewall
      - python3-dbus
    state: present

- name: Ensure firewalld is installed
  ansible.builtin.yum:
    name: firewalld
    state: present

- name: Ensure firewalld is started and enabled
  ansible.builtin.service:
    name: firewalld
    state: started
    enabled: true

- name: Open port 8080/tcp in firewalld
  ansible.posix.firewalld:
    port: 8080/tcp
    permanent: true
    state: enabled
    immediate: true

- name: Block outbound TCP 1433 using direct rule
  ansible.builtin.command:
    cmd: firewall-cmd --permanent --direct --add-rule ipv4 filter OUTPUT 0 -p tcp --dport 1433 -j REJECT

- name: Block outbound TCP 1434 using direct rule
  ansible.builtin.command:
    cmd: firewall-cmd --permanent --direct --add-rule ipv4 filter OUTPUT 0 -p tcp --dport 1434 -j REJECT

- name: Reload firewalld
  ansible.builtin.command:
    cmd: firewall-cmd --reload